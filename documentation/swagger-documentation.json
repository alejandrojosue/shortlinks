{
  "openapi": "3.0.0",
  "info": {
    "title": "DOCUMENTATION for the SHORTLINKS website",
    "version": "1.0.0",
    "description": "The backend for shortiLinks made in Node js"
  },
  "paths": {
    "/links/": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Endpoint to List Links",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum amount to obtain.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "description": "Management of paginations, allowing you to start from a specific record.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Links"
        ],
        "summary": "Endpoint to create a Link",
        "description": "",
        "parameters": [
          {
            "name": "title",
            "description": "A title for link.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "url",
            "description": "An url with correct format, example http://www.facebook.com",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "description": "A valid id mongo user identifier.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "An title already exists"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "example": "any"
                  },
                  "url": {
                    "example": "any"
                  },
                  "userId": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/links/{id}": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Endpoint to get a Link",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid id mongo link identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "put": {
        "tags": [
          "Links"
        ],
        "summary": "Endpoint to update a Link",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid id mongo link identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "An title already exists"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_id": {
                    "example": "any"
                  },
                  "userId": {
                    "example": "any"
                  },
                  "created_at": {
                    "example": "any"
                  },
                  "updated_at": {
                    "example": "any"
                  },
                  "args": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Links"
        ],
        "summary": "Endpoint to delete a Link",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid id mongo link identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/links/user/{userId}": {
      "get": {
        "tags": [
          "Links"
        ],
        "summary": "Endpoint to List Links from a specific user",
        "description": "",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid id mongo user identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint by List Users",
        "description": "",
        "parameters": [
          {
            "name": "limit",
            "description": "Maximum amount to obtain.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "description": "Management of paginations, allowing you to start from a specific record.",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint to create a User",
        "description": "",
        "parameters": [
          {
            "name": "name",
            "description": "A name for user.",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "description": "A email with correct format, example joe.doe@gmail.com",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pass",
            "description": "A pass with minimun 6 characters",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "An email already exists"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "example": "any"
                  },
                  "email": {
                    "example": "any"
                  },
                  "pass": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get By Id User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint to update a User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid id mongo link identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "An title already exists"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "_id": {
                    "example": "any"
                  },
                  "pass": {
                    "example": "any"
                  },
                  "email": {
                    "example": "any"
                  },
                  "_r": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Endpoint to delete a User",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "A valid id mongo user identifier."
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    }
  }
}